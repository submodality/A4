install.packages("knitr", dependencies=T)
library(knitr)
?knit
set.seed(3343)
pValues = rep(NA,100)
for (i in 1:100) {z = rnorm(20); x = rnorm(20); y = rnorm(20, mean=0.5*x); pValues[i] = summary(lm(y ~ x))$coef[2,4]}
sum(pValues < 0.05)
sum(p.adjust(pValues, method="bonferroni") < 0.1)
sum(p.adjust(pValues, method="BH") < 0.1)
set.seed(2222)
x <- rnorm(50)
e <- rnorm(50)
b0 <- 1
b1 <- 2
y <- b0 + b1*x + 3
y <- b0 + b1*x + e
betaFullX <- betaMissX <- rep(NA, 1000)
for (i in 1:1000) {x <- rnorm(50); e <- rnorm(50); b0 <- 1; b1 <- 2; y <- b0 + b1*x + e; betaFullX[i] <- lm (y ~ x)$coeff[2]}
xFull <- rep(NA, 1000)
for (i in 1:1000) {xFull[i] <- x <- rnorm(50); e <- rnorm(50); b0 <- 1; b1 <- 2; y <- b0 + b1*x + e; betaFullX[i] <- lm (y ~ x)$coeff[2]}
for (i in 1:1000) {x <- rnorm(50); e <- rnorm(50); b0 <- 1; b1 <- 2; y <- b0 + b1*x + e; betaFullX[i] <- lm (y ~ x)$coeff[2]}
quantile(x)
quantile(x, 0.9)
quantile(betaFullX)
for (i in 1:1000) {x <- rnorm(50); for (i in 1:50) {if (x[i] > 1) {x[i] <- NA}}; e <- rnorm(50); b0 <- 1; b1 <- 2; y <- b0 + b1*x + e; betaMissX[i] <- lm (y ~ x)$coeff[2]}
quantile(x, 0.9)
quantile(betaMissX)
quantile(betaMissX, na.rm=T)
betaMissY <- rep(NA, 1000)
for (i in 1:1000) {x <- rnorm(50); e <- rnorm(50); b0 <- 1; b1 <- 2; y <- b0 + b1*x + e; betaFullX[i] <- lm (y ~ x)$coeff[2]}
quantile(y)
quantile(y, 0.9)
library(MASS)
set.seed(2222)
betaFullX <- betaMissX <- rep(NA, 1000)
for (i in 1:1000) {x <- rnorm(50); e <- rnorm(50); b0 <- 1; b1 <- 2; y <- b0 + b1*x + e; betaFullX[i] <- rlm (y ~ x)$coeff[2]}
quantile(x, 0.9)
quantile(betaFullX)
for (i in 1:1000) {x <- rnorm(50); for (i in 1:50) {if (x[i] > 1.2) {x[i] <- NA}}; e <- rnorm(50); b0 <- 1; b1 <- 2; y <- b0 + b1*x + e; betaMissX[i] <- rlm (y ~ x)$coeff[2]}
quantile(betaMissX, na.rm=T)
set.seed(2222)
for (i in 1:1000) {x <- rnorm(50); e <- rnorm(50); b0 <- 1; b1 <- 2; y <- b0 + b1*x + e; betaFullX[i] <- rlm (y ~ x)$coeff[2]}
quantile(y, 0.9)
betaMissY <- rep(NA,1000)
for (i in 1:1000) {x <- rnorm(50); e <- rnorm(50); b0 <- 1; b1 <- 2; y <- b0 + b1*x + e; for (i in 1:50) {if (y[i] > 4.1) {y[i] <- NA}}; betaMissY[i] <- rlm (y ~ x)$coeff[2]}
set.seed(2222)
for (i in 1:1000) {x <- rnorm(50); e <- rnorm(50); b0 <- 1; b1 <- 2; y <- b0 + b1*x + e; betaFullX[i] <- rlm (y ~ x)$coeff[2]}
set.seed(2222)
for (i in 1:1000) {x <- rnorm(50); e <- rnorm(50); b0 <- 1; b1 <- 2; y <- b0 + b1*x + e; betaFullY[i] <- rlm (y ~ x)$coeff[2]}
for (i in 1:1000) {x <- rnorm(50); e <- rnorm(50); b0 <- 1; b1 <- 2; y <- b0 + b1*x + e; betaFullX[i] <- rlm (y ~ x)$coeff[2]}
quantile(betaFullX, 0.9)
quantile(betaFullX)
set.seed(2222)
for (i in 1:1000) {x <- rnorm(50); e <- rnorm(50); b0 <- 1; b1 <- 2; y <- b0 + b1*x + e; for (i in 1:50) {if (y[i] > 4.1) {y[i] <- NA}}; betaMissY[i] <- rlm (y ~ x)$coeff[2]}
quantile(betaMissY)
quantile(betaMissY, na.rm=T)
set.seed(2222)
betaFullX <- betaMissX <- betaMissY <- rep(NA, 1000)
for (i in 1:1000) {x <- rnorm(50); e <- rnorm(50); b0 <- 1; b1 <- 2; y <- b0 + b1*x + e; betaFullX[i] <- lm (y ~ x)$coeff[2]}
quantile(x, 0.9)
quantile(y, 0.9)
quantile(betaFullX)
set.seed(2222)
for (i in 1:1000) {x <- rnorm(50); for (i in 1:50) {if (x[i] > 1) {x[i] <- NA}}; e <- rnorm(50); b0 <- 1; b1 <- 2; y <- b0 + b1*x + e; betaMissX[i] <- lm (y ~ x)$coeff[2]}
quantile(betaMissX, na.rm=T)
set.seed(2222)
for (i in 1:1000) {x <- rnorm(50); e <- rnorm(50); b0 <- 1; b1 <- 2; y <- b0 + b1*x + e; for (i in 1:50) {if (y[i] > 4.1) {y[i] <- NA}}; betaMissY[i] <- lm (y ~ x)$coeff[2]}
quantile(betaMissY, na.rm=T)
x <- 1:4
y < 2
y <- 2
x + y
x <- list(2, "a", "b", TRUE)
x[[2]]
cube <- function(x, n) {x^3}
cube(3)
pow <- function(x = 4, n = 3) {x^n}
pow()
x <- 1:10
if (x > 5) {x <- 0}
library(datasets)
data(iris)
debug(ls)
?ls
ls
str(iris)
exit
exit()
q
undebug(ls)
str(iris)
taaply(iris$Sepal.Length, iris$Species, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris, 2, mean)
apply(iris, 2, mean, na.rm = TRUE)
class(iris$Sepal.Length)
colMeans(iris, na.rm = TRUE)
sum(is.na(iris))
colMeans(iris[,1:4])
class(colMeans(iris[,1:4]))
apply(iris[,1:4], 2, mean)
class(apply(iris[,1:4], 2, mean))
data(mtcars)
?mtcars
head(mtcars)
sum(is.na(mtcars))
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)[1]
tapply(mtcars$mpg, mtcars$cyl, mean)[3] - tapply(mtcars$mpg, mtcars$cyl, mean)[1]
tapply(mtcars$mpg, mtcars$cyl, mean)[1] - tapply(mtcars$mpg, mtcars$cyl, mean)[3]
f <- function (x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
?ls
debug(ls)
ls()
nn
n
undebug(ls)
head(mtcars)
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)[3] - tapply(mtcars$hp, mtcars$cyl, mean)[1]
x <- rnorm(10)
print (x)
x <- rnorm(10, 20, 2)
print(x)
summary(x)
set.seed(2222)
e <- rnorm(100)
x <- seq(1, 100)
y <- 1.5 - 3*x + e
plot(x, y)
pal <- colorRampPaelette(c("red", "yellow", "blue"))
pal <- colorRampPalette(c("red", "yellow", "blue"))
x <- rnorm(100)
plot(x, col = pal(100))
plot(x, col = pal(10))
as.date("2013-01-29") + 30
as.Date("2013-01-29") + 30
fileUrl <- "http://spark-public.s3.amazonaws.com/compdata/data/Baltimore_homicides.zip"
getwd()
setwd("~/Desktop/Coursera - Computing for Data Analysis")
download.file(fileUrl, destfile = "Baltimore_homicides.zip")
unzip(zipfile = "Baltimore_homicides.zip")
homicides <- readLines("homicides.txt")
homicides[1]
class(homicides)
i <- grep("[cC]ause: [Ss]hooting", homicides)
j <- grep("[Ss]hooting", homicides)
str(i)
str(j)
setdiff(j, i)
j[318]
homicides[318]
l <- grep("[Cc]ause: [Ss]tabbing", homicides)
str(l)
regexpr("<dd>[Ff]ound(.*?)</dd>", homicides[1:10])
substr(homicides[1], 177, 177 + 33 - 1)
regmatches(homicides[1:5], regexpr("<dd>[Ff]ound(.*?)</dd>", homicides[1:5]))
gsub("<dd>[Ff]ound on |</dd>", "", substr(homicides[1], 177, 177 + 33 - 1))
gsub("<dd>[Ff]ound on |</dd>", "", regmatches(homicides[1:5], regexpr("<dd>[Ff]ound(.*?)</dd>", homicides[1:5])))
as.Date(gsub("<dd>[Ff]ound on |</dd>", "", regmatches(homicides[1:5], regexpr("<dd>[Ff]ound(.*?)</dd>", homicides[1:5]))), "%B %d %Y")
as.Date(gsub("<dd>[Ff]ound on |</dd>", "", regmatches(homicides[1:5], regexpr("<dd>[Ff]ound(.*?)</dd>", homicides[1:5]))), "%B %d %Y")
as.Date(gsub("<dd>[Ff]ound on |</dd>", "", regmatches(homicides[1:5], regexpr("<dd>[Ff]ound(.*?)</dd>", homicides[1:5]))), "%B %d %Y")
?setOldClass()
gsub("<dd>[Ff]ound on |</dd>", "", regmatches(homicides[1:5], regexpr("<dd>[Ff]ound(.*?)</dd>", homicides[1:5])))
regmatches(regexpr("[Cc]ause:</*?)", homicides))
regmatches(homicides, regexpr("[Cc]ause:</*?)", homicides))
regmatches(homicides, regexpr("[Cc]ause:(.*?)", homicides))
unique(regmatches(homicides, regexpr("<dd>[Cc]ause:(.*?)</dd>", homicides)))
len(regexpr("[Cc]ause: [Ss]hooting"), homicides)
length(regexpr("[Cc]ause: [Ss]hooting"), homicides)
length(regexpr("[Cc]ause: [Ss]hooting", homicides)
stop()
length(regexpr("[Cc]ause: [Ss]hooting", homicides))
length(grep("[Cc]ause: [Ss]hooting", homicides))
?grep
sum(grepl("[Cc]ause: [Ss]hooting"), homicides)
sum(grepl("[Cc]ause: [Ss]hooting", homicides))
?tolower
string.test <- asphyxiation
string.test <- "asphyxiation:
stop()
string.test <- "asphyxiation"
string.test <- "asphyxiation"
strsplit(string.test, ^[a-zA-Z])
strsplit(string.test, "^[a-zA-Z]")
substr(string.test, 1, 2)
substr(string.test, 1, 1)
substr(string.text, 2)
substr(string.test, 2)
substr(string.test, 2,)
?substr
substring(string.text, 2)
substring(string.test, 2)
paste(substr(string.test, 1, 1), substring(string.test, 2))
paste(substr(string.test, 1, 1), substring(string.test, 2), collapse = "")
paste(substr(string.test, 1, 1), substring(string.test, 2), collapse = "", sep = "")
?grep
paste("[Cc]ause: ", "[", aslower(substr(string.test, 1, 1)), asupper(substr(string.test, 1, 1)), "]", substring(string.test, 2), collapse = "", sep = "")
paste("[Cc]ause: ", "[", as.lower(substr(string.test, 1, 1)), as.upper(substr(string.test, 1, 1)), "]", substring(string.test, 2), collapse = "", sep = "")
paste("[Cc]ause: ", "[", tolower(substr(string.test, 1, 1)), toupper(substr(string.test, 1, 1)), "]", substring(string.test, 2), collapse = "", sep = "")
class(length(grep("[Cc]ause: [Ss]hooting", homicides)))
source("http://spark-public.s3.amazonaws.com/compdata/scripts/submitscript4.R")
submit()
setwd("~/Desktop/Coursera - Computing for Data Analysis/A4")
submit()
submit()
homicides[1:4]
homicides[1100:1104]
search.age <- 29L
search.test <- paste(search.age, "[Yy]ears [Oo]ld", collapse = "", sep = "")
length(grep(search.test, homicides))
length(grep(as.character(search.test), homicides))
search.age <- 31L
length(grep(as.character(search.test), homicides))
search.test <- paste(search.age, " [Yy]ears [Oo]ld", collapse = "", sep = "")
length(grep(as.character(search.test), homicides))
search.age = 29L
length(grep(as.character(search.test), homicides))
search.age = 42L
length(grep(as.character(search.test), homicides))
search.test <- paste(search.age, " [Yy]ears [Oo]ld", collapse = "", sep = "")
length(grep(as.character(search.test), homicides))
search.age = 21L
search.test <- paste(search.age, " [Yy]ears [Oo]ld", collapse = "", sep = "")
length(grep(as.character(search.test), homicides))
submit()
submit()
submit()
submit()
